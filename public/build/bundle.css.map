{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Toolbar.svelte",
    "..\\..\\TileSelect.svelte",
    "..\\..\\MapCanvas.svelte",
    "..\\..\\TileOption.svelte",
    "..\\..\\p5.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Toolbar from \"./Toolbar.svelte\";\n  import TileSelect from \"./TileSelect.svelte\";\n  import MapCanvas from \"./MapCanvas.svelte\";\n</script>\n\n<div class=\"wrapper\">\n  <div class=\"toolbar-container\">\n    <Toolbar />\n  </div>\n  <div class=\"tile-select-container\">\n    <TileSelect tileset=\"dungeon\" />\n  </div>\n  <div class=\"map-canvas-container\">\n    <MapCanvas />\n  </div>\n</div>\n\n<style>\n  .wrapper {\n    width: 100vw;\n    height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: auto 1fr;\n  }\n  .toolbar-container {\n    position: relative;\n    border-bottom: 2px solid #202020;\n    /* box-shadow: 0 4px 6px #00000015; */\n    grid-row: 1;\n    grid-column: 1 / 3;\n  }\n  .tile-select-container {\n    position: relative;\n    border-right: 2px solid #202020;\n    /* box-shadow: 4px 0 6px #00000015; */\n    grid-row: 2;\n    grid-column: 1;\n  }\n  .map-canvas-container {\n    position: relative;\n    grid-row: 2;\n    grid-column: 2;\n    overflow: hidden;\n  }\n</style>\n",
    "<script>\r\n</script>\r\n\r\n<div class=\"wrapper\">\r\n  <div>\r\n    <button id=\"save-button\">\r\n      <span class=\"material-icons\">save</span>\r\n    </button>\r\n    <button>\r\n      <span class=\"material-icons\">terrain</span>\r\n    </button>\r\n    <button>\r\n      <span class=\"material-icons\">place</span>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    display: flex;\r\n    align-content: flex-start;\r\n  }\r\n\r\n  /* button {\r\n    border: none;\r\n    height: 48px;\r\n    background: none;\r\n    outline: none;\r\n  } */\r\n</style>\r\n",
    "<script>\r\n  const tilesetData = require(\"../game/config/tilesets.json\");\r\n\r\n  import TileOption from \"./TileOption.svelte\";\r\n\r\n  export let tileset;\r\n\r\n  let tileOptions = tilesetData[tileset].map((option, i) => ({\r\n    index: i,\r\n    data: option,\r\n  }));\r\n</script>\r\n\r\n<div class=\"wrapper\">\r\n  <div>\r\n    <div>\r\n      {#each tileOptions as option}\r\n        <TileOption {...option} />\r\n      {/each}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .wrapper > div {\r\n    height: 0;\r\n    flex-grow: 1;\r\n    overflow: auto;\r\n  }\r\n  .wrapper > div > div {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, auto);\r\n    /* row-gap: 2px;\r\n    column-gap: 2px; */\r\n    padding: 6px;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  const fs = require(\"fs\");\r\n  const path = require(\"path\");\r\n  const tilesetData = require(\"../game/config/tilesets.json\");\r\n\r\n  import P5 from \"p5-svelte\";\r\n  import { selectedTileIndex } from \"./stores.js\";\r\n\r\n  class MapData {\r\n    constructor(p5, width, height) {\r\n      this.map = {};\r\n      this.p5 = p5;\r\n      this.width = width;\r\n      this.height = height;\r\n      this.image = p5.createGraphics(width * 48, height * 48);\r\n    }\r\n\r\n    updateImage(x, y) {\r\n      // Draw background.\r\n      this.image.fill(48, 96, 208);\r\n      this.image.noStroke();\r\n      this.image.rect(x * 48, y * 48, 48, 48);\r\n      // Draw tiles.\r\n      for (let layer = 0; layer < 3; layer++) {\r\n        if (this.map[y] && this.map[y][x] && this.map[y][x][layer]) {\r\n          this.image.image(\r\n            this.map[y][x][layer].image.get(0, 0, 48, 48),\r\n            x * 48,\r\n            y * 48\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    addTile(tile) {\r\n      let { x, y, layer } = tile;\r\n      if (!this.map[y]) {\r\n        this.map[y] = {};\r\n      }\r\n      if (!this.map[y][x]) {\r\n        this.map[y][x] = {};\r\n      }\r\n      if (!this.map[y][x][layer]) {\r\n        this.map[y][x][layer] = tile;\r\n        this.updateImage(x, y);\r\n      }\r\n    }\r\n\r\n    eraseAt(x, y) {\r\n      for (let layer = 0; layer < 3; layer++) {\r\n        if (this.map[y] && this.map[y][x] && this.map[y][x][layer]) {\r\n          delete this.map[y][x][layer];\r\n        }\r\n      }\r\n      this.updateImage(x, y);\r\n    }\r\n\r\n    export() {\r\n      let list = [];\r\n      Object.entries(this.map).forEach(([y, row]) => {\r\n        Object.entries(row).forEach(([x, col]) => {\r\n          Object.entries(col).forEach(([layer, tile]) => {\r\n            list.push({\r\n              x: tile.x,\r\n              y: tile.y,\r\n              index: tile.index,\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      let data = {\r\n        width: this.width,\r\n        height: this.height,\r\n        tiles: list,\r\n      };\r\n\r\n      fs.writeFile(\r\n        path.join(__dirname, \"../game/config/maps.json\"),\r\n        JSON.stringify(data),\r\n        (error) => {\r\n          if (error) {\r\n            console.log(error);\r\n          }\r\n        }\r\n      );\r\n      // console.log(list);\r\n    }\r\n  }\r\n\r\n  let selectedIndex;\r\n  let wrapperWidth;\r\n  let wrapperHeight;\r\n\r\n  let mapWidth = 20;\r\n  let mapHeight = 15;\r\n\r\n  const sketch = (p5) => {\r\n    let mapData = new MapData(p5, mapWidth, mapHeight);\r\n\r\n    p5.setup = () => {\r\n      p5.createCanvas(wrapperWidth, wrapperHeight);\r\n      p5.select(\"#save-button\").mousePressed(() => {\r\n        mapData.export();\r\n      });\r\n    };\r\n\r\n    p5.draw = () => {\r\n      resizeCanvas();\r\n      drawBackground();\r\n      drawTiles();\r\n      drawGrid();\r\n      drawCursor();\r\n      p5.noStroke();\r\n      p5.fill(255, 0, 0);\r\n      p5.text(Math.round(p5.frameRate()), 0, 20);\r\n    };\r\n\r\n    const resizeCanvas = () => {\r\n      if (wrapperWidth !== p5.width || wrapperHeight !== p5.height) {\r\n        p5.resizeCanvas(wrapperWidth, wrapperHeight);\r\n      }\r\n    };\r\n\r\n    const cursorX = () => {\r\n      let val = Math.floor(p5.mouseX / 48);\r\n      return Math.min(Math.max(val, 0), mapWidth - 1);\r\n    };\r\n    const cursorY = () => {\r\n      let val = Math.floor(p5.mouseY / 48);\r\n      return Math.min(Math.max(val, 0), mapHeight - 1);\r\n    };\r\n\r\n    const mouseOver = () => {\r\n      return (\r\n        cursorX() == Math.floor(p5.mouseX / 48) &&\r\n        cursorY() == Math.floor(p5.mouseY / 48)\r\n      );\r\n    };\r\n\r\n    const drawBackground = () => {\r\n      p5.clear();\r\n      p5.fill(48, 96, 208);\r\n      p5.noStroke();\r\n      p5.rect(0, 0, mapWidth * 48, mapHeight * 48);\r\n    };\r\n\r\n    const drawTiles = () => {\r\n      p5.image(mapData.image, 0, 0);\r\n    };\r\n\r\n    const drawGrid = () => {\r\n      p5.stroke(255, 255, 255, 48);\r\n      p5.strokeWeight(1);\r\n      for (let y = 1; y < mapHeight; y++) {\r\n        p5.line(0, y * 48, mapWidth * 48, y * 48);\r\n      }\r\n      for (let x = 1; x < mapWidth; x++) {\r\n        p5.line(x * 48, 0, x * 48, mapHeight * 48);\r\n      }\r\n    };\r\n\r\n    const drawCursor = () => {\r\n      if (mouseOver()) {\r\n        p5.noFill();\r\n        p5.stroke(255, 0, 0);\r\n        p5.strokeWeight(4);\r\n        p5.rect(cursorX() * 48 + 2, cursorY() * 48 + 2, 48 - 4, 48 - 4);\r\n      }\r\n    };\r\n\r\n    const addTileByMouse = () => {\r\n      let tileData = tilesetData[\"dungeon\"][selectedIndex];\r\n      if (mouseOver()) {\r\n        p5.loadImage(\r\n          path.join(__dirname, \"../game\", tileData[\"spritesheetSrc\"]),\r\n          (image) => {\r\n            mapData.addTile({\r\n              x: cursorX(),\r\n              y: cursorY(),\r\n              layer: tileData[\"layer\"],\r\n              index: selectedIndex,\r\n              image: image,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    };\r\n\r\n    const eraseTileByMouse = () => {\r\n      if (mouseOver()) {\r\n        mapData.eraseAt(cursorX(), cursorY());\r\n      }\r\n    };\r\n\r\n    p5.mousePressed = () => {\r\n      if (p5.mouseButton === p5.LEFT) {\r\n        addTileByMouse();\r\n      } else if (p5.mouseButton === p5.RIGHT) {\r\n        eraseTileByMouse();\r\n      }\r\n    };\r\n    p5.mouseDragged = () => {\r\n      if (p5.mouseButton === p5.LEFT) {\r\n        addTileByMouse();\r\n      } else if (p5.mouseButton === p5.RIGHT) {\r\n        eraseTileByMouse();\r\n      }\r\n    };\r\n  };\r\n\r\n  selectedTileIndex.subscribe((value) => {\r\n    selectedIndex = value;\r\n  });\r\n</script>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  bind:clientWidth={wrapperWidth}\r\n  bind:clientHeight={wrapperHeight}\r\n>\r\n  <P5 {sketch} />\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  const path = require(\"path\");\r\n\r\n  import P5 from \"p5-svelte\";\r\n  import { selectedTileIndex } from \"./stores.js\";\r\n\r\n  export let index;\r\n  export let data;\r\n  let selected;\r\n\r\n  const sketch = (p5) => {\r\n    let image;\r\n\r\n    p5.setup = () => {\r\n      p5.createCanvas(48, 48);\r\n      image = p5.loadImage(\r\n        path.join(__dirname, \"../game\", data[\"spritesheetSrc\"])\r\n      );\r\n    };\r\n\r\n    p5.draw = () => {\r\n      p5.image(image.get(0, 0, 48, 48), 0, 0);\r\n    };\r\n  };\r\n\r\n  selectedTileIndex.subscribe((value) => {\r\n    selected = value == index;\r\n  });\r\n</script>\r\n\r\n<div class=\"wrapper\">\r\n  <P5 {sketch} />\r\n  <button on:click={() => selectedTileIndex.set(index)} class:selected />\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: 48px;\r\n    height: 48px;\r\n    position: relative;\r\n  }\r\n  button {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n  }\r\n  button:hover {\r\n    border: 4px solid #ff0000;\r\n  }\r\n  button.selected {\r\n    border: 4px solid #00ffff;\r\n  }\r\n</style>\r\n",
    "<script>\n  import _p5 from './action';\n  export let sketch = null;\n</script>\n\n<figure use:_p5={sketch} />\n\n<style>\n  figure {\n    display: inline;\n    margin: 0;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAmBE,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,IAAI,CAAC,GAAG,CAC5B,qBAAqB,CAAE,IAAI,CAAC,GAAG,AACjC,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAEhC,QAAQ,CAAE,CAAC,CACX,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,AACpB,CAAC,AACD,sBAAsB,eAAC,CAAC,AACtB,QAAQ,CAAE,QAAQ,CAClB,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAE/B,QAAQ,CAAE,CAAC,CACX,WAAW,CAAE,CAAC,AAChB,CAAC,AACD,qBAAqB,eAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,CAAC,CACX,WAAW,CAAE,CAAC,CACd,QAAQ,CAAE,MAAM,AAClB,CAAC;AC3BD,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,UAAU,AAC3B,CAAC;ACGD,QAAQ,6CAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,sCAAQ,CAAG,GAAG,8BAAC,CAAC,AACd,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,CAAC,CACZ,QAAQ,CAAE,IAAI,AAChB,CAAC,AACD,uBAAQ,CAAG,kBAAG,CAAG,GAAG,eAAC,CAAC,AACpB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAGtC,OAAO,CAAE,GAAG,AACd,CAAC;ACyLD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;AChMD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,AACd,CAAC,AACD,oBAAM,MAAM,AAAC,CAAC,AACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC3B,CAAC,AACD,MAAM,SAAS,cAAC,CAAC,AACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC3B,CAAC;AChDD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,CAAC,AACX,CAAC"
}